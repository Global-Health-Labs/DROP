import React, { Component } from "react";
import { Button, Typography, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle,
  Card, CardActions, CardContent } from '@mui/material';
import { CSVLink } from "react-csv";
import { Link } from 'react-router-dom';
import { ThreeCircles, ThreeDots } from  'react-loader-spinner'

import AddCircleRoundedIcon from '@mui/icons-material/AddCircleRounded';
import DownloadIcon from '@mui/icons-material/Download';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import RestartAltIcon from '@mui/icons-material/RestartAlt';
import TableViewIcon from '@mui/icons-material/TableView';

import { LOCAL_KEY_STORAGE, SPECIAL_CHAR_FILE } from "../config/Configurations";
import { COLUMN_HEADERS } from "../config/worklist/TableHeaderRow";
import Header from "./PageHeader";
import { getSampleWorklistData } from "./GenerateSampleWorklist";
import { getMastermixWorklistData } from "./GenerateMastermixWorklist";

import csv from '../assets/csv-logo.png';
import txt from '../assets/text-logo.png';
import experiment from '../assets/experiment-icon.png';

/**
 * This class renders the component to display different options to download worklist file, experimental plan text file and view interactively instruction.
 * This component can be accessed with the routing path: <domain_name>/result
 * (Example: https://robonaatworklist/result)
 */
export default class ResultOutput extends Component {
  
  constructor(props) {
    super(props);

    this.state = {
      isLoading: true, // flag to track if the webpage is still loading
      hasMasterMixData: true,
      createNewWorkList: false,
      worklistData: [], // data to be populated to worklist file
      sampleData: [], // data to be populated to sample file

      listOfMastermixes: JSON.parse(localStorage.getItem(LOCAL_KEY_STORAGE.RECIPE_STEPS)) || [],
      experimentalPlanData: JSON.parse(localStorage.getItem(LOCAL_KEY_STORAGE.COMMON_EXPERIMENTAL_PLAN_FIELDS)) || []
    };
  }

  componentDidMount() {
    if (this.state.experimentalPlanData.length > 0) {      
      // Perform the calculation to generate worklists
      this.generatedWorklistData();
    }
  }

  /** 
   * This function is to used to perform calculations to generate mastermix and sample worklist files in CSV format.
   */
  generatedWorklistData = () => {

    /*
     * Check if mastermix data exists in the browser cache. 
     * If not, this state will render the button for user to add new mastermix before proceeeding to next step.
     */
    if (this.state.listOfMastermixes.length === 0) {
      this.setState({hasMasterMixData: false});
      return;
    }

    // Attempt to generate mastermix worklist data
    const data = getMastermixWorklistData(this.state.listOfMastermixes, this.state.experimentalPlanData, true);

    this.setState({worklistData: data}, () => {

      // Generate sample worklist data if the mastermix worklist is successfully generated
      if (this.state.worklistData.length > 0) {

        const resultSampleData = getSampleWorklistData(this.state.listOfMastermixes, this.state.experimentalPlanData);

        this.setState({sampleData: resultSampleData}, () => {

          if (this.state.sampleData.length > 0) {
            this.setState({isLoading: false});
          }
        });
      }
    });
  }

  /** Update the state to close the alert dialog form */
  closeAlertWorklist = (event, reason) => {

    // Pressing 'Esc' or clicking on the backdrop won't close the form
    if(reason !== 'backdropClick' && reason !== 'escapeKeyDown') {
      this.setState({createNewWorkList: false});
    } 
  };

  /**
   * Export text file that contains the list of user input (for mastermixes)
   */
  exportTableTextFile = () => {
    const fileData = 'DO NOT EDIT THIS FILE\n\n\n' 
      + SPECIAL_CHAR_FILE + '\n\n\n'
      + JSON.stringify(this.state.experimentalPlanData, null, '\t') + '\n\n\n' + SPECIAL_CHAR_FILE + '\n\n\n' 
      + JSON.stringify(this.state.listOfMastermixes, null, '\t');
    const element = document.createElement("a");
    const file = new Blob([fileData], {type: 'text/plain;charset=utf-8'});
    element.href = URL.createObjectURL(file);
    element.download = FILE_NAME.EXPERIMENTAL_PLAN;
    document.body.appendChild(element);
    element.click();
  }

  render() {

    // Check when users haven't entered mastermix data yet
    if (!this.state.hasMasterMixData || this.state.experimentalPlanData.length === 0) {
      return (
        <div style={{position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)'}}>
          <div style={{display: 'flex', justifyContent: 'center', marginBottom: 10}}>
            <ThreeCircles color="orange" outerCircleColor="black" />
          </div>
          <Typography variant="h6">
            {this.state.experimentalPlanData.length === 0 ? 'Please create new experimental plan to continue' 
              : 'Please add mastermixes to generate worklist files'}
          </Typography>
          <div style={{display: 'flex', justifyContent: 'center', marginBottom: 10}}>
            <ThreeDots color="orange" />
          </div>
          <Button variant="contained" size="medium" startIcon={<AddCircleRoundedIcon/>} component={Link} to="/">
            {this.state.experimentalPlanData.length === 0 ? 'Create New Experimental Plan' : 'Add New Mastermix'}
          </Button>
        </div>
      );
    }

    /** Render loading indicator while the page is still loading */
    if (this.state.isLoading) {
      return (
        <div style={{position: 'absolute', left: '50%', top: '50%', transform: 'translate(-50%, -50%)'}}>
          <div style={{display: 'flex', justifyContent: 'center', marginBottom: 10}}>
            <ThreeCircles color="orange" outerCircleColor="black" />
          </div>
          <Typography variant="h6">Please wait while we are generating the worklist file...</Typography>
          <div style={{display: 'flex', justifyContent: 'center', marginBottom: 10}}>
            <ThreeDots color="orange" />
          </div>
        </div>
      );
    }

    return (
      <div>
        <Header />
        <div style={styles.container}>

          <div style={{display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center', marginTop: 100}}>

            {/** Section for Worklist (.csv file) */}
            <Card sx={styles.cardContainer}>
              <CardContent>
                <img src={csv} alt={'Download CSV file'} style={{width: '10vh'}}/>              
                <Typography gutterBottom variant="h5" component="div">
                  Worklist Files
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  The worklist file (.csv) that is used to input into the Hamilton run control to tell the robot what actions to follow and in what order.
                </Typography>
              </CardContent>
              <CardActions sx={{justifyContent: 'center'}}>
                {DownloadFile('Mastermix Worklist', FILE_NAME.MASTERMIX_WORKLIST, this.state.worklistData)}
                {DownloadFile('Sample Worklist', FILE_NAME.SAMPLE_WORKLIST, this.state.sampleData)}
              </CardActions>
            </Card>

            <div style={{padding: 10}}/>

            {/** Section for table file */}
            <Card sx={styles.cardContainer}>
              <CardContent>
                <img src={txt} alt={'Download Text file'} style={{width: '10vh'}}/>
                <Typography gutterBottom variant="h5" component="div">
                  Experimental Plan Data
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  The file contains data of experimental plan entered by user. The file is used to import existing worklist and experimental plan.            
                </Typography>
              </CardContent>
              <CardActions sx={{justifyContent: 'center'}}>
                <Button id="export-table" variant="contained" color="success" size="large" startIcon={<DownloadIcon/>} onClick={this.exportTableTextFile}>
                  Export Experimental Plan
                </Button> 
              </CardActions>
            </Card>

            <div style={{padding: 10}}/>

            {/** Section for RoboNAAT worklist viewer (experimental plan) */}
            <Card sx={styles.cardContainer}>
              <CardContent>
                <img src={experiment} alt={'Experimental plan'} style={{width: '10vh'}}/>
                <Typography gutterBottom variant="h5" component="div">
                  RoboNAAT Worklist Viewer
                </Typography>
                <Typography variant="body2" color="text.secondary">
                  The web app interactively guides the loading of reagents for an automatically generated experiment on a RoboNAAT capable robot.
                </Typography>
              </CardContent>
              <CardActions sx={{justifyContent: 'center'}}>
                <Button variant="contained" color="success" size="large" startIcon={<TableViewIcon />} component={Link} to="/instruction">
                  View Experimental Plan
                </Button> 
              </CardActions>
            </Card>

          </div>
        
        <div style={{marginTop: 50}}/>

        {/** Container for buttons at the bottom of the page */}
        <div style={{ display: 'flex', justifyContent: 'center'}}>
          <div style={{marginRight: 10}}>
            <Button variant="contained" startIcon={<ArrowBackIcon/>} component={Link} to="/">
              {'Back To User Experimental Input'}
            </Button>
          </div>

          <div>
            <Button variant="contained" color='error' size="medium" startIcon={<RestartAltIcon/>} 
              onClick={() => {this.setState({createNewWorkList: true}); }}
            >
              {'Start Over'}
            </Button>
          </div>
        </div>

        {/** Alert dialog to be displayed when users click on "Start Over" button */}
        <Dialog
          open={this.state.createNewWorkList}
          onClose={this.closeAlertWorklist}
          aria-labelledby="result-dialog-title" aria-describedby="result-dialog-description" fullWidth={true}
        >
          <DialogTitle id="result-dialog-title" style={styles.dialogTitle}>
            Are you sure you want to start over?
          </DialogTitle>
          <DialogContent style={{paddingTop: 20}}>
            <DialogContentText id="result-dialog-description" style={{fontSize: 14}}>
              If you start over, all progresses will be lost and you will be prompted to add new list of mastermixes.
            </DialogContentText>
          </DialogContent>
          <DialogActions>

            <Button style={{textDecorationLine: 'underline', fontSize: 13}} onClick={this.closeAlertWorklist} autoFocus>
              Cancel
            </Button>

            <Button style={{backgroundColor: '#084c9e', color: '#FFF', fontSize: 13}} component={Link} to="/" onClick={() => {

              // Clear state
              this.setState({worklistData: [], sampleData: []});

              // Remove all localstorage key from browser cache
              localStorage.removeItem(LOCAL_KEY_STORAGE.RECIPE_STEPS);
              localStorage.removeItem(LOCAL_KEY_STORAGE.EXPERIMENTAL_PLAN);
              localStorage.removeItem(LOCAL_KEY_STORAGE.COMMON_EXPERIMENTAL_PLAN_FIELDS);

            }}>Yes, Start Over</Button>

          </DialogActions>
        </Dialog>

      </div>
      </div>
    );
  }
}

/** Render the button to download file in CSV format */
const DownloadFile = (buttonName, fileName, data) => {
  return (
    <div>
      <CSVLink 
        data={data} 
        headers={COLUMN_HEADERS}   
        filename={fileName}
        style={{color: 'white', textDecorationLine: 'none'}}
        target="_blank">
        
        <Button variant="contained" color="success" size="large" startIcon={<DownloadIcon/>}>
          {buttonName}
        </Button>
      </CSVLink>
  </div>
  );
}

/** Styling for elements render in this component */
const styles = {
  container: {
    paddingTop: 5, height:'90vh', justifyContent: 'center', alignItems: 'center'
  },
  titleContainer: {
    paddingLeft: 20, paddingRight: 20, marginBottom: 10
  },
  dialogTitle: {
    backgroundColor: '#084c9e', color: '#FFF', fontSize: 16, textAlign: 'center'
  },
  paperContainer: {
    width: '70%', overflow: 'auto', paddingTop: 3, paddingBottom: 3,
    justifyContent: 'center', alignItems: 'center'
  },
  gridContainer: {
    width: '70%', display: 'grid', gridTemplateColumns: '50% 50%', gridAutoFlow: 'column'
  },
  gridSectionContainer: {
    display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center'
  },
  cardContainer: {
    width: '55vh', height: '50vh', border: 1, borderRadius: 5, boxShadow: 5, borderColor: 'gray', display: 'flex', justifyContent: 'center', flexDirection: 'column'
  }
}

// List of file names
const FILE_NAME = {
  EXPERIMENTAL_PLAN: 'experimental-plan-RoboNAAT.txt',
  MASTERMIX_WORKLIST: 'mastermix_worklist.csv',
  SAMPLE_WORKLIST: 'sample_worklist.csv'
}